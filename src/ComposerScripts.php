<?php
namespace DMealy\Laracivi;

use Symfony\Component\Filesystem\Filesystem;
use Composer\Script\Event;
use DMealy\Laracivi\CodeGen;

class ComposerScripts
{
    /**
     * Move civicrm-packages into civicrm-core.
     * Generate civicrm.mysql scripts and DAO objects.
     *
     * @param  Event   $event
     * @param  CodeGen $codeGen
     * @return null
     */
    public static function civiInstall(Event $event)
    {
        // Currently in app/Civi
        $vendorDir = dirname(dirname(__DIR__)) . '/vendor';
        $crmDir = $vendorDir . '/dmealy/civicrm-core';
        $packageDir = $vendorDir . '/civicrm/civicrm-packages';
        $sqlScriptDir = $crmDir . '/sql';
        if (file_exists($crmDir)) {
            self::installPackages($crmDir, $packageDir);
            // self::addNoCmsClasses($crmDir);
            self::generateCode($sqlScriptDir);
            self::setEnvironment();
        }
    }

    public static function installPackages($crmDir, $packageDir)
    {
        $corePackagesDir = $crmDir . '/packages';
        if (file_exists($packageDir) and (! file_exists($corePackagesDir))) {
            rename($packageDir, $corePackagesDir);
        }
    }

    /**
     * Creates stubs for CMS-related classes used by CiviCRM.
     * Moved to fork of civicrm-core.
     *
     * @param string $crmDir
     */
    public static function addNoCmsClasses($crmDir)
    {
        // $noCmsSysFile = $crmDir . '/CRM/Utils/System/NoCms.php';
        // if (! file_exists($noCmsSysFile)) {
        //     $txt = "<?php\n\n/* Stub generated by Install script. */\n\n"
        //         . "class CRM_Utils_System_NoCms extends CRM_Utils_System_Base {\n"
        //         . "    /* Implements abstract function in CRM_Utils_System_Base. */\n"
        //         . "    public function getLoginURL(\$destination = '')\n"
        //         . "    {\n"
        //         . "      return '';\n"
        //         . "    }\n"
        //         . "   public function getDefaultFileStorage() {\n"
        //         . "     return array(\n"
        //         . "       'url' => env('APP_URL', 'http://localhost') . '/storage',\n"
        //         . "       'path' => storage_path(),\n"
        //         . "     );\n"
        //         . "   }\n"
        //         . "}\n";
        //     file_put_contents($noCmsSysFile, $txt);
        // }

        // $noCmsPermFile = $crmDir . '/CRM/Core/Permission/NoCms.php';
        // if (! file_exists($noCmsPermFile)) {
        //     $txt = "<?php\n\n/* Stub generated by Install script. */\n\n"
        //         . "class CRM_Core_Permission_NoCms extends CRM_Core_Permission_Base {\n"
        //         . "}\n";
        //     file_put_contents($noCmsPermFile, $txt);
        // }

        // $noCmsHookFile = $crmDir . '/CRM/Utils/Hook/NoCms.php';
        // if (! file_exists($noCmsHookFile)) {
        //     $txt = "<?php\n\n/* Stub generated by Install script. */\n\n"
        //         . "class CRM_Utils_Hook_NoCms extends CRM_Utils_Hook {\n"
        //         . "    public function invokeViaUF(\n"
        //         . "      \$numParams,\n"
        //         . "      &\$arg1, &\$arg2, &\$arg3, &\$arg4, &\$arg5, &\$arg6,\n"
        //         . "      \$fnSuffix\n"
        //         . "    )\n"
        //         . "    {\n"
        //         . "        return '';\n"
        //         . "    }\n"
        //         . "}\n";
        //     file_put_contents($noCmsHookFile, $txt);
        // }

        // $noCmsConfigFile = $crmDir . '/CRM/Core/CodeGen/Config.php';
        // if (file_exists($noCmsConfigFile)) {
        //     $txt = file_get_contents($noCmsConfigFile);
        //     $txt = str_replace("'joomla',", "'joomla',\n      'nocms',", $txt);
        //     $txt = str_replace("\$this->config->cms !== 'joomla')", "\$this->config->cms !== 'joomla' and \$this->config->cms !== 'nocms')", $txt);
        //     file_put_contents($noCmsConfigFile, $txt);
        // }

    }

    public static function generateCode($sqlScriptDir)
    {
        if (! file_exists($sqlScriptDir . '/civicrm.mysql')) {
            (new CodeGen())->generate();
        }
    }

    public static function setEnvironment()
    {
        // Add civi DB settings to .env
        $env = preg_split('/\s+/', file_get_contents(base_path('.env')));
        $oldEnv = [];
        foreach ($env as $value) {
            $val = explode("=", $value, 2);
            if (!empty($val[0])) {
                $oldEnv[$val[0]] = (empty($val[1]) ? '' : $val[1]);
            }
        }
        $addEnv = '';
        $addEnv .= (isset($oldEnv['CIVI_CMS']) ? "" : "CIVI_CMS=NoCms\n");
        $addEnv .= (isset($oldEnv['CIVI_DB_CONNECTION']) ? "" : "CIVI_DB_CONNECTION=civicrm\n");
        $addEnv .= (isset($oldEnv['CIVI_DB_DATABASE']) ? "" : "CIVI_DB_DATABASE=civicrm\n");
        $addEnv .= (isset($oldEnv['CIVI_DB_HOST']) ? "" : "CIVI_DB_HOST=127.0.0.1\n");
        $addEnv .= (isset($oldEnv['CIVI_DB_PORT']) ? "" : "CIVI_DB_PORT=3306\n");
        $addEnv .= (isset($oldEnv['CIVI_DB_USERNAME']) ? ""
            : "CIVI_DB_USERNAME=" . (isset($oldEnv['DB_USERNAME']) ? $oldEnv['DB_USERNAME'] : "civiuser") . "\n");
        $addEnv .= (isset($oldEnv['CIVI_DB_PASSWORD']) ? ""
            : "CIVI_DB_PASSWORD=" . (isset($oldEnv['CIVI_DB_PASSWORD']) ? $oldEnv['CIVI_DB_PASSWORD'] : "secret") . "\n");
        $newEnv = '';
        if ($addEnv != '') {
            $addEnv = "\n" . $addEnv;
            $oldEnv = file_get_contents(base_path('.env'));
            $newEnv = $oldEnv . $addEnv;
            file_put_contents(base_path('.env'), $newEnv);
            echo "Added CIVI_DB_ environment variables to .env\n";
        }
    }


}
